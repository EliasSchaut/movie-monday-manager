// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  origin    String           @unique
  settings  ServerSettings?
  oauths     ServerOAuth[]
  users     User[]
  movies    Movie[]
  history   MovieHistory[]
  watchlist MovieWatchlist[]
  MovieVote MovieVote[]
}

model ServerSettings {
  server_id Int    @unique
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  title                       String?
  desc                        String?
  max_votes                   Int     @default(50)
  max_proposals               Int     @default(5)
  max_movies                  Int     @default(30)
  watchlist_auto              Boolean @default(false)
  watchlist_num_of_movies     Int     @default(2)
  watchlist_schedule_creation String  @default("0 20 * * 1")
  watchlist_schedule_start    String  @default("0 20 * * 1")
  movie_gap_mins              Int     @default(15)
  round_to_5mins              Boolean @default(true)
  discord_auto                Boolean @default(false)
  discord_webhook             String?
  discord_msg                 String?
}

model ServerOAuth {
  id            Int         @id @default(autoincrement())
  server_id     Int
  server        Server      @relation(fields: [server_id], references: [id], onDelete: Cascade)
  name          String
  issuer_url    String
  client_id     String
  client_secret String
  user_oauth    UserOAuth[]

  @@unique([server_id, issuer_url, client_id])
}

model User {
  id                   String      @id @default(uuid())
  created_at           DateTime    @default(now())
  server_id            Int
  server               Server      @relation(fields: [server_id], references: [id], onDelete: Cascade)
  email                String      @unique
  username             String      @unique
  password             String
  first_name           String
  last_name            String
  avatar               String?
  bio                  String?
  profile_public       Boolean     @default(false)
  email_opt_in         Boolean     @default(false)
  is_admin             Boolean     @default(false)
  verified             Boolean     @default(false)
  pw_reset             Boolean     @default(false)
  challenge            String
  email_update_request String?
  oauth                UserOAuth[]
  proposals            Movie[]
  votes                MovieVote[]
}

model UserOAuth {
  id             Int         @id @default(autoincrement())
  user_id        String
  user           User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  server_oath_id Int
  server_oath    ServerOAuth @relation(fields: [server_oath_id], references: [id], onDelete: Cascade)
  token          String

  @@unique([user_id, server_oath_id])
}

model Movie {
  id        Int    @id @default(autoincrement())
  server_id Int
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  // Basic Information
  adult          Boolean?
  original_title String?
  runtime        Int
  release_date   DateTime?

  // Production Information
  budget   Int?
  revenue  Int?
  homepage String?

  // Identifiers and Ratings
  tmdb_id            Int?
  imdb_id            String?
  tmdb_rate          Int?
  imdb_rate          String?
  metascore          String?
  rotten_tomato_rate String?

  // Media Information
  poster_path String?

  // Proposal Information
  proposed_at DateTime @default(now())
  proposer_id String
  proposer    User     @relation(fields: [proposer_id], references: [id], onDelete: Cascade)

  // Relations
  metadata  MovieMetadata[]
  votes     MovieVote[]
  watchlist MovieWatchlist[]

  @@unique([tmdb_id, server_id])
  @@unique([imdb_id, server_id])
}

// metadata for each language
model MovieMetadata {
  movie_id  Int
  movie     Movie  @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  lang_meta String

  // Basic Information
  title             String
  plot_overview     String?
  tagline           String?
  genres            String[]
  original_language String?
  spoken_languages  String[]

  // Production Information
  director             String?
  writer               String?
  actors               String[]
  production_companies String[]
  production_countries String[]

  @@unique([movie_id, lang_meta])
}

model MovieVote {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  movie_id   Int
  movie      Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  server_id  Int
  server     Server   @relation(fields: [server_id], references: [id], onDelete: Cascade)
  rank       Int

  @@unique([movie_id, server_id, user_id])
}

model MovieWatchlist {
  movie_id   Int
  movie      Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  server_id  Int
  server     Server   @relation(fields: [server_id], references: [id], onDelete: Cascade)
  start_time DateTime
  end_time   DateTime

  @@unique([movie_id, server_id])
}

model MovieHistory {
  id        Int    @id @default(autoincrement())
  server_id Int
  server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  watched_at   DateTime  @default(now())
  poster_path  String?
  release_date DateTime?
  tmdb_id      Int?
  imdb_id      String?

  metadata MovieHistoryMetadata[]

  @@unique([tmdb_id, server_id])
  @@unique([imdb_id, server_id])
}

model MovieHistoryMetadata {
  history_id    Int
  movie_history MovieHistory @relation(fields: [history_id], references: [id], onDelete: Cascade)
  lang_meta     String

  title         String
  plot_overview String?

  @@unique([history_id, lang_meta])
}
